//! This module defines the LR(1) grammar for the mustache templating syntax
//! supported by Pistachio.
//!
//! Note: to simplify the production rules and keep things context free,
//! a custom lexer is used - see [`crate::parser::Lexer`].
//!
//! [mustache]: https://jgonggrijp.gitlab.io/wontache/mustache.5.html

use crate::{
    lexer::{Token, Layout},
    parser::{Spanned, balanced},
    template::{Name, Node},
    Error,
    Loader,
};

grammar<'a>(size_hint: &mut usize, loader: &mut dyn Loader<'a>, source: &'a str);

// Tokens

extern {
    type Location = usize;
    type Error    = Error;

    enum Token<'a> {
        "EOF"     => Token::Eof(<&'a str>, <Layout>),
        "IDENT"   => Token::Ident(<&'a str>),
        "STRING"  => Token::String(<&'a str>),
        "{{"      => Token::Enter(<&'a str>, _),
        "}}"      => Token::Leave(_, <Layout>),
        "&"       => Token::Ampersand,
        "#"       => Token::Hash,
        "^"       => Token::Caret,
        "/"       => Token::RSlash,
        "<"       => Token::LAngle,
        ">"       => Token::RAngle,
        "{"       => Token::LBrace,
        "$"       => Token::Dollar,
        "!"       => Token::Bang,
        "*"       => Token::Asterisk,
        "."       => Token::Period,
        "="       => Token::Equals,
    }
}

// Productions

pub Mustache: Vec<Node<'a>> = {
    Nodes => <>
}

#[inline]
Nodes: Vec<Node<'a>> = {
    Node+ => <>.into_iter().flatten().collect(),
}

Node: Vec<Node<'a>> = {
    Section  => <>,
    Inverted => <>,
    // Parent   => <>,
    // Block    => <>,
    // Partial  => <>,
    Variable => vec![<>],
    Comment  => vec![<>],
    Eof      => vec![<>],
}

Section: Vec<Node<'a>> = {
    <text:"{{"> "#" <name:Name> <layout:"}}"> <nodes:Nodes?> <close:Closing> =>? {
        balanced!("#", &name, &close.name, name.span(), {
            Ok(Node::section(layout.trim(text), name, nodes, close))
        })
    },
}

Inverted: Vec<Node<'a>> = {
    <text:"{{"> "^" <name:Name> <layout:"}}"> <nodes:Nodes?> <close:Closing> =>? {
        balanced!("^", &name, &close.name, name.span(), {
            Ok(Node::inverted(layout.trim(text), name, nodes, close))
        })
    },
}

// Block: Vec<Node<'a>> = {
//     <text:"{{"> "$" <name:Key> <layout:"}}"> <nodes:Nodes?> <close:Closing> =>? {
//         balanced!("$", &name, &close.key, key.span(), {
//             Ok(Node::block(layout.trim(text), key, nodes, close))
//         })
//     },
// }

// Parent: Vec<Node<'a>> = {
//     <text:"{{"> "<" "*" <name:Name> <layout:"}}"> <nodes:Nodes?> <close:Closing> =>? {
//         balanced!("<", &name, &close.key, name.span(), {
//             Ok(Node::dynamic_parent(layout.trim(text), name, nodes, close))
//         })
//     },

//     <text:"{{"> "<" <start:@L> <path:Path> <layout:"}}"> <nodes:Nodes?> <close:ClosePath> =>? {
//         balanced!("<", &name, &close.key, (start, name).span(), {
//             let template = loader.get_template(name)?;
//             *size_hint += template.size_hint();
//             Ok(template.inherit_parent(layout.rim(text), nodes, close))
//         })
//     },
// }

// Partial: Vec<Node<'a>> = {
//     <text:"{{"> ">" "*" <name:Name> <layout:"}}"> => {
//         Node::dynamic_partial(layout.trim(text), name)
//     },

//     <text:"{{"> ">" <path:Path> <layout:"}}"> =>? {
//         let template = loader.get_template(name)?;
//         *size_hint += template.size_hint();
//         Ok(template.include_partial(layout.trim(text)))
//     },
// }

// Closing: Node<'a> = {
//     <text:"{{"> "/" <name:Name> <layout:"}}"> => {
//         Node::closing(layout.trim(text), name)
//     },
// }

Closing: Node<'a> = {
    <text:"{{"> "/" <path:Path> <layout:"}}"> => {
        Node::closing(layout.trim(text), path)
    },
}

Variable: Node<'a> = {
    <text:"{{"> "{" <name:Name> "}}" => Node::unescaped(text, name),
    <text:"{{"> "&" <name:Name> "}}" => Node::unescaped(text, name),
    <text:"{{">     <name:Name> "}}" => Node::escaped(text, name),
}

Comment: Node<'a> = {
    <text:"{{"> "!" String <layout:"}}"> => {
        Node::content(layout.trim(text))
    },
}

Eof: Node<'a> = {
    <"EOF"> => {
        let (text, layout) = <>;
        let text = layout.trim(text);
        *size_hint += text.len();
        Node::content(text)
    },
}

Name: Name<'a> = {
    <start:@L> <head:"IDENT"> <mut keys:("." <"IDENT">)*> => {
        keys.insert(0, head);
        Name { start, keys }
    },

    <start:@L> "." => {
        Name { start, keys: vec!["."] }
    },
}

Path: Name<'a> = {
    <start:@L> <path:"STRING"> => {
        Name { start, keys: vec![path.trim()] }
    },
}

Key: Name<'a> = {
    <start:@L> <key:"IDENT"> => {
        Name { start, keys: vec![key] }
    },
}

String: &'a str = {
    <"STRING"> => <>.trim_end(),
}

//! This module defines the LR(1) grammar for the mustache templating syntax
//! supported by Pistachio.
//!
//! Note: to simplify the production rules and keep things context free,
//! a custom lexer is used - see [`crate::parser::Lexer`].
//!
//! [mustache]: https://jgonggrijp.gitlab.io/wontache/mustache.5.html

use super::{
    rule,
    Token,
};
use crate::{
    template::{
        Key,
        Node,
    },
    Error,
    Loader,
};

grammar<'a>(size_hint: &mut usize, loader: &mut dyn Loader<'a>, source: &'a str);

// Tokens

extern {
  type Location = usize;
  type Error    = Error;

  enum Token<'a> {
    "IDENT"   => Token::Ident(<&'a str>),
    "STRING"  => Token::String(<&'a str>),
    "CONTENT" => Token::Content(<&'a str>),
    "{{"      => Token::Enter(<&'a str>),
    "}}"      => Token::Leave(<&'a str>),
    "&"       => Token::Ampersand,
    "#"       => Token::Pound,
    "^"       => Token::Caret,
    "/"       => Token::Slash,
    ">"       => Token::Greater,
    "<"       => Token::Less,
    "$"       => Token::Dollar,
    "!"       => Token::Bang,
    "*"       => Token::Asterisk,
    "."       => Token::Period,
    "="       => Token::Equals,
  }
}

// Productions

pub Mustache: Vec<Node<'a>> = {
    Nodes => <>
}

#[inline]
Nodes: Vec<Node<'a>> = {
    Node+ => <>.into_iter().flatten().collect(),
}

Node: Vec<Node<'a>> = {
    Section  => <>,
    Inverted => <>,
    Parent   => <>,
    Block    => <>,
    Partial  => <>,
    Content  => vec![<>],
    Comment  => vec![],
    Variable => <>,
}

Section: Vec<Node<'a>> = {
    "{{" "#" <key:Key> "}}" <nodes:Nodes> <end:Closing> =>? {
        rule::balanced!(&key == end, "#", key);
        Ok(rule::section(key, nodes))
    },
}

Inverted: Vec<Node<'a>> = {
    "{{" "^" <key:Key> "}}" <nodes:Nodes> <end:Closing> =>? {
        rule::balanced!(&key == end, "^", key);
        Ok(rule::inverted(key, nodes))
    },
}

Block: Vec<Node<'a>> = {
    "{{" "$" <name:Ident> "}}" <nodes:Nodes> <end:Closing> =>? {
        rule::balanced!(name == end, "$", name);
        Ok(rule::block(name, nodes))
    },
}

Parent: Vec<Node<'a>> = {
    "{{" "<" "*" <key:Key> "}}" <nodes:Nodes> <end:Closing> =>? {
        rule::balanced!(&key == end, "<", key);
        Ok(rule::parent(key, nodes))
    },

    "{{" "<" <path:String> "}}" <nodes:Nodes> <end:Closing> =>? {
        rule::balanced!(path == end, "<", path);
        let parent = loader.get_template(path)?;
        *size_hint += parent.size_hint;
        Ok(rule::inherit(parent.nodes.clone(), nodes))
    },
}

Partial: Vec<Node<'a>> = {
    "{{" ">" "*" <key:Key> "}}" => {
        rule::partial(key)
    },

    "{{" ">" <path:String> "}}" =>? {
        let partial = loader.get_template(path)?;
        *size_hint += partial.size_hint();
        Ok(partial.nodes.clone())
    },
}

Closing: &'a str = {
    "{{" "/" <String> "}}" => <>,
}

Variable: Vec<Node<'a>> = {
    "{{" "&" <key:Key> "}}" => rule::unescaped(key),
    "{{"     <key:Key> "}}" => rule::escaped(key),
}

Comment: Option<Node<'a>> = {
    "{{" "!" String "}}" => None,
}

Content: Node<'a> = {
    <"CONTENT"> => {
        *size_hint += <>.len();
        rule::content(<>)
    },
}

Key: Key<'a> = {
    <head:Ident> <tail:("." <Ident>)*> => {
        Key::new(head, tail)
    },

    "." => {
        Key::new(".", Vec::with_capacity(1))
    }
}

String: &'a str = {
    <"STRING"> => <>.trim_end(),
}

Ident: &'a str = {
    <"IDENT"> => <>,
}
